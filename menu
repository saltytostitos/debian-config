#!/bin/bash
# vim: set filetype=bash :

# Comment out the emulate line as it's causing issues
# emulate -L ksh

# Store common terminal sequences to reduce tput calls
TERM_CLEAR=$(tput clear)
TERM_BOLD=$(tput bold)
TERM_RESET=$(tput sgr0)
TERM_HIDE_CURSOR=$(tput civis)
TERM_SHOW_CURSOR=$(tput cnorm)
TERM_BLACK_FG=$(tput setaf 0)
TERM_RED_FG=$(tput setaf 1)
TERM_GREEN_FG=$(tput setaf 2)
TERM_YELLOW_FG=$(tput setaf 3)
TERM_BLUE_FG=$(tput setaf 4)
TERM_CYAN_FG=$(tput setaf 6)
TERM_WHITE_FG=$(tput setaf 7)
TERM_WHITE_BG=$(tput setab 7)
TERM_RED_BG=$(tput setab 1)
TERM_CYAN_BG=$(tput setab 6)
TERM_CLEAR_LINE=$(tput el)
TERM_MOVE_TO_TOP=$(tput cup 0 0)

# Clean up terminal state on exit
trap '$TERM_SHOW_CURSOR; $TERM_CLEAR; exit' EXIT INT TERM

# Initialize variables
ALL_ARGUMENTS=""
TERM_COLS=$(tput cols)
TERM_LINES=$(tput lines)

# Prompts based on list of strings. Required arguments. Will fail if no arguments are provided
moreArgs() {
  ALL_ARGUMENTS="" # Reset arguments for each call
  for arg in $1; do
    echo "${TERM_BLACK_FG}${TERM_CYAN_BG}Enter value for: $arg ${TERM_RESET}"
    read -p "$arg: " input
    if [[ $arg == *"-" ]]; then
      ALL_ARGUMENTS="${ALL_ARGUMENTS} $arg"
    fi
    ALL_ARGUMENTS="${ALL_ARGUMENTS} $input"

    if [ -z "$ALL_ARGUMENTS" ]; then
      echo "${TERM_RED_FG}No arguments were provided for $arg"
      sleep 2
      return 1
    fi
  done
  return 0
}

# Any items listed in the array must also be changed in the case statement
OPTIONS=(
  "Bottom Monitor"
  "htop"
  "Fly.io"
  "Github Clone Repo"
  "mailsy"
  "mkcert"
  "nmap"
  "Pretty Ping"
  "Speed Test"
  "Get Weather"
  "Yazi"
  "Neo VIM"
  "NPM Package Analyzer"
  "Multi Pull"
  "Multi Push"
  "Multi Check"
  "Dev Server Tunnel"
  "Clear DNS"
)

# Function to print the menu with the current selection highlighted
print_menu() {
  local selected=$1
  local size=${#OPTIONS[@]}

  # Save cursor position for first run
  if [ -z "$MENU_INITIALIZED" ]; then
    echo -n "$TERM_CLEAR"
    MENU_INITIALIZED=1
  else
    # Move cursor to top-left corner instead of clearing screen
    echo -n "$TERM_MOVE_TO_TOP"
  fi

  # Print header
  local header="  Select an app:  "
  local header_padding=$(( (TERM_COLS - ${#header}) / 2 ))
  if [ $header_padding -lt 0 ]; then
    header_padding=0
  fi

  echo "${TERM_BOLD}${TERM_WHITE_FG}${TERM_RED_BG}$(printf '%*s' "$header_padding" '')$header$(printf '%*s' "$header_padding" '')${TERM_RESET}"
  echo ""

  # Calculate visible range if there are many options
  local max_visible=15
  local start_idx=0
  local end_idx=$((size-1))

  if [ $size -gt $max_visible ]; then
    # Adjust the visible window to show options around the selected item
    local half_window=$(($max_visible / 2))
    start_idx=$(($selected - $half_window))
    end_idx=$(($selected + $half_window))

    # Adjust if out of bounds
    if [ $start_idx -lt 0 ]; then
      start_idx=0
      end_idx=$(($max_visible - 1))
    fi
    if [ $end_idx -ge $size ]; then
      end_idx=$(($size - 1))
      start_idx=$(($end_idx - $max_visible + 1))
      if [ $start_idx -lt 0 ]; then
        start_idx=0
      fi
    fi
  fi

  # Show scroll indicator if needed
  if [ $start_idx -gt 0 ]; then
    echo "  ${TERM_WHITE_FG}${TERM_BOLD}↑ More options above ${TERM_RESET}"
  else
    # Clear the line if no scroll indicator
    echo "$TERM_CLEAR_LINE"
  fi

  # Display menu items with proper line clearing
  for i in $(seq 0 $((max_visible+1))); do
    idx=$((start_idx + i))
    echo -n "$TERM_CLEAR_LINE"  # Clear the entire line before printing
    if [ $idx -ge 0 ] && [ $idx -le $end_idx ]; then
      if [ $idx -eq $selected ]; then
        echo "${TERM_BLACK_FG}${TERM_WHITE_BG}${TERM_BOLD} → ${OPTIONS[$idx]} ${TERM_RESET}"
      else
        echo "  ${OPTIONS[$idx]}"
      fi
    else
      echo ""  # Print empty line to overwrite previous content
    fi
  done

  # Show scroll indicator if needed
  echo -n "$TERM_CLEAR_LINE"  # Clear the line
  if [ $end_idx -lt $(($size - 1)) ]; then
    echo "  ${TERM_WHITE_FG}${TERM_BOLD}↓ More options below ${TERM_RESET}"
  else
    echo ""  # Print empty line
  fi

  echo ""
  echo -n "$TERM_CLEAR_LINE"  # Clear the line
  echo "${TERM_CYAN_FG}${TERM_BOLD}──────────────────────────────────${TERM_RESET}"
  echo -n "$TERM_CLEAR_LINE"  # Clear the line
  echo "${TERM_YELLOW_FG}Use ${TERM_BOLD}↑/↓${TERM_RESET}${TERM_YELLOW_FG} arrow keys to navigate and ${TERM_BOLD}Enter${TERM_RESET}${TERM_YELLOW_FG} to select. Press ${TERM_BOLD}q${TERM_RESET}${TERM_YELLOW_FG} to quit.${TERM_RESET}"
}

run_app() {
  local choice=$1
  echo -n "$TERM_CLEAR"

  # Process the selection
  case $choice in
  "Bottom Monitor")
    echo "Starting Bottom Monitor..."
    TERM=xterm-256color btm
    ;;
  "htop")
    echo "Starting htop..."
    TERM=xterm-256color htop
    ;;
  "Fly.io")
    flyctl
    echo "${TERM_RED_FG}NOT CONFIGURED -- MUST USE MANUALLY"
    sleep 2
    ;;
  "Github Clone Repo")
    if moreArgs "REPO_URL"; then
      echo 'Calling: gh repo clone' $ALL_ARGUMENTS
      gh repo clone $ALL_ARGUMENTS
      echo "Press any key to continue..."
      read -n 1
    fi
    ;;
  "mailsy")
    echo -n "$TERM_CLEAR"
    echo "${TERM_WHITE_FG}${TERM_CYAN_BG}  Mailsy  ${TERM_RESET}"
    echo "${TERM_YELLOW_FG}Select an option:"
    select mailsyOpt in Generate Fetch Delete "Get Info"; do
      case $mailsyOpt in
      Generate)
        mailsy g
        break
        ;;
      Fetch)
        mailsy m
        break
        ;;
      Delete)
        mailsy d
        break
        ;;
      "Get Info")
        mailsy me
        break
        ;;
      esac
    done
    echo "Press any key to continue..."
    read -n 1
    ;;
  "mkcert")
    if moreArgs "HOST"; then
      echo -n "$TERM_CLEAR"
      mkcert $ALL_ARGUMENTS
      echo "Press any key to continue..."
      read -n 1
    fi
    ;;
  "nmap")
    nmap
    echo "${TERM_RED_FG}NOT CONFIGURED -- MUST USE MANUALLY"
    sleep 2
    ;;
  "Pretty Ping")
    if moreArgs "HOST"; then
      echo "Calling: prettyping" $ALL_ARGUMENTS
      prettyping $ALL_ARGUMENTS --nounicode --nolegend
      echo "Press any key to continue..."
      read -n 1
    fi
    ;;
  "Speed Test")
    speedtest
    echo "Press any key to continue..."
    read -n 1
    ;;
  "Get Weather")
    curl https://wttr.in/\?QFd
    echo "Press any key to continue..."
    read -n 1
    ;;
  "Yazi")
    yazi
    ;;
  "Neo VIM")
    nvim
    ;;
  "NPM Package Analyzer")
    echo "Calling: node-modules-inspector"
    pnpx node-modules-inspector@latest
    echo "Press any key to continue..."
    read -n 1
    ;;
  "Multi Pull")
    multipull
    echo "Press any key to continue..."
    read -n 1
    ;;
  "Multi Push")
    multipush
    echo "Press any key to continue..."
    read -n 1
    ;;
  "Multi Check")
    multicheck
    echo "Press any key to continue..."
    read -n 1
    ;;
  "Dev Server Tunnel")
    echo "Calling: dev-tunnel"
    dev-tunnel
    echo "Press any key to continue..."
    read -n 1
    ;;
  "Clear DNS")
    echo "Calling: cleardns"
    cleardns
    echo "Press any key to continue..."
    read -n 1
    ;;
  esac

  # Return to menu
  return 0
}

main() {
  local selected=0
  local size=${#OPTIONS[@]}
  local MENU_INITIALIZED=""

  # Hide cursor
  echo -n "$TERM_HIDE_CURSOR"

  # Display initial menu
  print_menu $selected

  # Capture key presses
  while true; do
    # Read a single key press
    read -s -n 1 key

    # Handle special keys (arrow keys are multi-byte sequences)
    if [[ $key = $'\x1b' ]]; then
      # Read the rest of the escape sequence without a timeout
      # This approach is more compatible across different systems
      read -s -n 1 -t 1 k1
      if [[ $k1 = '[' ]]; then
        read -s -n 1 -t 1 k2
        if [[ $k2 = 'A' ]]; then  # Up arrow
          ((selected--))
          if [ $selected -lt 0 ]; then
            selected=$((size-1))
          fi
          print_menu $selected
        elif [[ $k2 = 'B' ]]; then  # Down arrow
          ((selected++))
          if [ $selected -ge $size ]; then
            selected=0
          fi
          print_menu $selected
        fi
      fi
    elif [[ $key = "q" ]]; then
      # Show cursor before exiting
      echo -n "$TERM_SHOW_CURSOR"
      echo -n "$TERM_CLEAR"
      exit 0
    elif [[ $key = "" ]]; then  # Enter key
      # Show cursor during app execution
      echo -n "$TERM_SHOW_CURSOR"

      choice=${OPTIONS[$selected]}
      # Clear screen before running the app
      echo -n "$TERM_CLEAR"
      run_app "$choice"

      # Reset initialization flag to force clear screen on return
      MENU_INITIALIZED=""

      # Hide cursor and show menu again
      echo -n "$TERM_HIDE_CURSOR"
      print_menu $selected
    fi
  done
}

# Show cursor on script exit
trap '$TERM_SHOW_CURSOR' EXIT

# Start the script
main
